// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `devices.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    var Ice = require("ice").Ice;
    var __M = Ice.__M;
    var nice = __M.require(module, 
    [
        "data",
        "nice"
    ]).nice;
    
    var Slice = Ice.Slice;

    nice.api = __M.module("nice.api");

    nice.api.devices = __M.module("nice.api.devices");

    nice.api.devices.NodeStatusValue = Slice.defineObject(
        function(userVal, userUnit, internalVal, internalUnit, validity, validityString, timeStampAfter)
        {
            Ice.Object.call(this);
            this.userVal = userVal !== undefined ? userVal : null;
            this.userUnit = userUnit !== undefined ? userUnit : "";
            this.internalVal = internalVal !== undefined ? internalVal : null;
            this.internalUnit = internalUnit !== undefined ? internalUnit : "";
            this.validity = validity !== undefined ? validity : nice.api.data.Validity.BAD;
            this.validityString = validityString !== undefined ? validityString : "";
            this.timeStampAfter = timeStampAfter !== undefined ? timeStampAfter : 0;
        },
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::nice::api::devices::NodeStatusValue"
        ],
        -1,
        function(__os)
        {
            __os.writeObject(this.userVal);
            __os.writeString(this.userUnit);
            __os.writeObject(this.internalVal);
            __os.writeString(this.internalUnit);
            nice.api.data.Validity.__write(__os, this.validity);
            __os.writeString(this.validityString);
            __os.writeLong(this.timeStampAfter);
        },
        function(__is)
        {
            var self = this;
            __is.readObject(function(__o){ self.userVal = __o; }, nice.api.data.Value);
            this.userUnit = __is.readString();
            __is.readObject(function(__o){ self.internalVal = __o; }, nice.api.data.Value);
            this.internalUnit = __is.readString();
            this.validity = nice.api.data.Validity.__read(__is);
            this.validityString = __is.readString();
            this.timeStampAfter = __is.readLong();
        },
        false);

    nice.api.devices.NodeStatusValuePrx = Slice.defineProxy(Ice.ObjectPrx, nice.api.devices.NodeStatusValue.ice_staticId, undefined);

    Slice.defineOperations(nice.api.devices.NodeStatusValue, nice.api.devices.NodeStatusValuePrx);
    Slice.defineSequence(nice.api.devices, "NodeStatusValueArrayHelper", "Ice.ObjectHelper", false, "nice.api.devices.NodeStatusValue");

    nice.api.devices.NodeRecord = Slice.defineObject(
        function(id, nodeID, deviceID, description, userUnit, internalUnit, userPrecision, storageMode, isStored, isUnitRelative, isUserLocked, isAdminLocked, desiredValue, currentValue, dataType, writeOnSync, hasControlInput)
        {
            Ice.Object.call(this);
            this.id = id !== undefined ? id : "";
            this.nodeID = nodeID !== undefined ? nodeID : "";
            this.deviceID = deviceID !== undefined ? deviceID : "";
            this.description = description !== undefined ? description : "";
            this.userUnit = userUnit !== undefined ? userUnit : "";
            this.internalUnit = internalUnit !== undefined ? internalUnit : "";
            this.userPrecision = userPrecision !== undefined ? userPrecision : 0.0;
            this.storageMode = storageMode !== undefined ? storageMode : nice.api.data.StorageMode.NONE;
            this.isStored = isStored !== undefined ? isStored : false;
            this.isUnitRelative = isUnitRelative !== undefined ? isUnitRelative : false;
            this.isUserLocked = isUserLocked !== undefined ? isUserLocked : false;
            this.isAdminLocked = isAdminLocked !== undefined ? isAdminLocked : false;
            this.desiredValue = desiredValue !== undefined ? desiredValue : null;
            this.currentValue = currentValue !== undefined ? currentValue : null;
            this.dataType = dataType !== undefined ? dataType : "";
            this.writeOnSync = writeOnSync !== undefined ? writeOnSync : false;
            this.hasControlInput = hasControlInput !== undefined ? hasControlInput : false;
        },
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::nice::api::devices::NodeRecord"
        ],
        -1,
        function(__os)
        {
            __os.writeString(this.id);
            __os.writeString(this.nodeID);
            __os.writeString(this.deviceID);
            __os.writeString(this.description);
            __os.writeString(this.userUnit);
            __os.writeString(this.internalUnit);
            __os.writeDouble(this.userPrecision);
            nice.api.data.StorageMode.__write(__os, this.storageMode);
            __os.writeBool(this.isStored);
            __os.writeBool(this.isUnitRelative);
            __os.writeBool(this.isUserLocked);
            __os.writeBool(this.isAdminLocked);
            __os.writeObject(this.desiredValue);
            __os.writeObject(this.currentValue);
            __os.writeString(this.dataType);
            __os.writeBool(this.writeOnSync);
            __os.writeBool(this.hasControlInput);
        },
        function(__is)
        {
            var self = this;
            this.id = __is.readString();
            this.nodeID = __is.readString();
            this.deviceID = __is.readString();
            this.description = __is.readString();
            this.userUnit = __is.readString();
            this.internalUnit = __is.readString();
            this.userPrecision = __is.readDouble();
            this.storageMode = nice.api.data.StorageMode.__read(__is);
            this.isStored = __is.readBool();
            this.isUnitRelative = __is.readBool();
            this.isUserLocked = __is.readBool();
            this.isAdminLocked = __is.readBool();
            __is.readObject(function(__o){ self.desiredValue = __o; }, nice.api.devices.NodeStatusValue);
            __is.readObject(function(__o){ self.currentValue = __o; }, nice.api.devices.NodeStatusValue);
            this.dataType = __is.readString();
            this.writeOnSync = __is.readBool();
            this.hasControlInput = __is.readBool();
        },
        false);

    nice.api.devices.NodeRecordPrx = Slice.defineProxy(Ice.ObjectPrx, nice.api.devices.NodeRecord.ice_staticId, undefined);

    Slice.defineOperations(nice.api.devices.NodeRecord, nice.api.devices.NodeRecordPrx);
    Slice.defineSequence(nice.api.devices, "NodeArrayHelper", "Ice.ObjectHelper", false, "nice.api.devices.NodeRecord");
    Slice.defineDictionary(nice.api.devices, "NodeMap", "NodeMapHelper", "Ice.StringHelper", "Ice.ObjectHelper", false, undefined, "nice.api.devices.NodeRecord", Ice.HashMap.compareEquals);

    nice.api.devices.DeviceRecord = Slice.defineObject(
        function(id, displayName, description, primaryNodeID, stateNodeID, brokenNodeID, type, visibleNodeIDs)
        {
            Ice.Object.call(this);
            this.id = id !== undefined ? id : "";
            this.displayName = displayName !== undefined ? displayName : "";
            this.description = description !== undefined ? description : "";
            this.primaryNodeID = primaryNodeID !== undefined ? primaryNodeID : "";
            this.stateNodeID = stateNodeID !== undefined ? stateNodeID : "";
            this.brokenNodeID = brokenNodeID !== undefined ? brokenNodeID : "";
            this.type = type !== undefined ? type : nice.api.data.DeviceType.TEST_TYPE;
            this.visibleNodeIDs = visibleNodeIDs !== undefined ? visibleNodeIDs : null;
        },
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::nice::api::devices::DeviceRecord"
        ],
        -1,
        function(__os)
        {
            __os.writeString(this.id);
            __os.writeString(this.displayName);
            __os.writeString(this.description);
            __os.writeString(this.primaryNodeID);
            __os.writeString(this.stateNodeID);
            __os.writeString(this.brokenNodeID);
            nice.api.data.DeviceType.__write(__os, this.type);
            nice.api.data.StringArrayHelper.write(__os, this.visibleNodeIDs);
        },
        function(__is)
        {
            this.id = __is.readString();
            this.displayName = __is.readString();
            this.description = __is.readString();
            this.primaryNodeID = __is.readString();
            this.stateNodeID = __is.readString();
            this.brokenNodeID = __is.readString();
            this.type = nice.api.data.DeviceType.__read(__is);
            this.visibleNodeIDs = nice.api.data.StringArrayHelper.read(__is);
        },
        false);

    nice.api.devices.DeviceRecordPrx = Slice.defineProxy(Ice.ObjectPrx, nice.api.devices.DeviceRecord.ice_staticId, undefined);

    Slice.defineOperations(nice.api.devices.DeviceRecord, nice.api.devices.DeviceRecordPrx);
    Slice.defineDictionary(nice.api.devices, "DeviceMap", "DeviceMapHelper", "Ice.StringHelper", "Ice.ObjectHelper", false, undefined, "nice.api.devices.DeviceRecord", Ice.HashMap.compareEquals);

    nice.api.devices.DevicesMonitor = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::nice::api::devices::DevicesMonitor"
        ],
        -1, undefined, undefined, false);

    nice.api.devices.DevicesMonitorPrx = Slice.defineProxy(Ice.ObjectPrx, nice.api.devices.DevicesMonitor.ice_staticId, undefined);

    Slice.defineOperations(nice.api.devices.DevicesMonitor, nice.api.devices.DevicesMonitorPrx,
    {
        "added": [, , , , , , [["nice.api.devices.DeviceMapHelper"], ["nice.api.devices.NodeMapHelper"]], , , true, ],
        "removed": [, , , , , , [["nice.api.devices.DeviceMapHelper"], ["nice.api.devices.NodeMapHelper"]], , , true, ],
        "changed": [, , , , , , [["nice.api.devices.NodeMapHelper"]], , , true, ],
        "dynamicDevicesAdded": [, , , , , , [[7], ["nice.api.data.StringArrayHelper"]], , , , ],
        "dynamicDevicesRemoved": [, , , , , , [[7]], , , , ],
        "onSubscribe": [, , , , , , [["nice.api.devices.DeviceMapHelper"], ["nice.api.devices.NodeMapHelper"], ["nice.api.data.StringToStringArrayMapHelper"]], , , true, ]
    });
    exports.nice = nice;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));
