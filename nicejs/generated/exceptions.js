// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `exceptions.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    var Ice = require("ice").Ice;
    var __M = Ice.__M;
    var Slice = Ice.Slice;

    var nice = __M.module("nice");

    nice.api = __M.module("nice.api");

    nice.api.exceptions = __M.module("nice.api.exceptions");

    nice.api.exceptions.TopicException = Slice.defineUserException(
        function(reason, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.reason = reason !== undefined ? reason : "";
        },
        Ice.UserException,
        "nice::api::exceptions::TopicException",
        function(__os)
        {
            __os.writeString(this.reason);
        },
        function(__is)
        {
            this.reason = __is.readString();
        },
        false,
        false);

    nice.api.exceptions.SubscriberNotReachableException = Slice.defineUserException(
        function(reason, _cause)
        {
            nice.api.exceptions.TopicException.call(this, reason, _cause);
        },
        nice.api.exceptions.TopicException,
        "nice::api::exceptions::SubscriberNotReachableException",
        undefined, undefined,
        false,
        false);

    nice.api.exceptions.TopicNotActiveException = Slice.defineUserException(
        function(reason, _cause)
        {
            nice.api.exceptions.TopicException.call(this, reason, _cause);
        },
        nice.api.exceptions.TopicException,
        "nice::api::exceptions::TopicNotActiveException",
        undefined, undefined,
        false,
        false);

    nice.api.exceptions.CommandException = Slice.defineUserException(
        function(reason, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.reason = reason !== undefined ? reason : "";
        },
        Ice.UserException,
        "nice::api::exceptions::CommandException",
        function(__os)
        {
            __os.writeString(this.reason);
        },
        function(__is)
        {
            this.reason = __is.readString();
        },
        false,
        false);

    nice.api.exceptions.StopException = Slice.defineUserException(
        function(_cause)
        {
            Ice.UserException.call(this, _cause);
        },
        Ice.UserException,
        "nice::api::exceptions::StopException",
        undefined, undefined,
        false,
        false);

    nice.api.exceptions.CommandParseException = Slice.defineUserException(
        function(reason, _cause)
        {
            nice.api.exceptions.CommandException.call(this, reason, _cause);
        },
        nice.api.exceptions.CommandException,
        "nice::api::exceptions::CommandParseException",
        undefined, undefined,
        false,
        false);

    nice.api.exceptions.CannotQueueException = Slice.defineUserException(
        function(reason, _cause)
        {
            nice.api.exceptions.CommandException.call(this, reason, _cause);
        },
        nice.api.exceptions.CommandException,
        "nice::api::exceptions::CannotQueueException",
        undefined, undefined,
        false,
        false);

    nice.api.exceptions.MustQueueException = Slice.defineUserException(
        function(reason, _cause)
        {
            nice.api.exceptions.CommandException.call(this, reason, _cause);
        },
        nice.api.exceptions.CommandException,
        "nice::api::exceptions::MustQueueException",
        undefined, undefined,
        false,
        false);

    nice.api.exceptions.PermissionException = Slice.defineUserException(
        function(reason, _cause)
        {
            nice.api.exceptions.CommandException.call(this, reason, _cause);
        },
        nice.api.exceptions.CommandException,
        "nice::api::exceptions::PermissionException",
        undefined, undefined,
        false,
        false);

    nice.api.exceptions.ServerLockException = Slice.defineUserException(
        function(reason, _cause)
        {
            nice.api.exceptions.PermissionException.call(this, reason, _cause);
        },
        nice.api.exceptions.PermissionException,
        "nice::api::exceptions::ServerLockException",
        undefined, undefined,
        false,
        false);

    nice.api.exceptions.ServerNotReadyException = Slice.defineUserException(
        function(message, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.message = message !== undefined ? message : "";
        },
        Ice.UserException,
        "nice::api::exceptions::ServerNotReadyException",
        function(__os)
        {
            __os.writeString(this.message);
        },
        function(__is)
        {
            this.message = __is.readString();
        },
        false,
        false);

    nice.api.exceptions.TimeoutException = Slice.defineUserException(
        function(_cause)
        {
            Ice.UserException.call(this, _cause);
        },
        Ice.UserException,
        "nice::api::exceptions::TimeoutException",
        undefined, undefined,
        false,
        false);

    nice.api.exceptions.InvalidParameterException = Slice.defineUserException(
        function(message, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.message = message !== undefined ? message : "";
        },
        Ice.UserException,
        "nice::api::exceptions::InvalidParameterException",
        function(__os)
        {
            __os.writeString(this.message);
        },
        function(__is)
        {
            this.message = __is.readString();
        },
        false,
        false);
    exports.nice = nice;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));
