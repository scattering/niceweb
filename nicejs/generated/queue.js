// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `queue.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    var Ice = require("ice").Ice;
    var __M = Ice.__M;
    var nice = __M.require(module, 
    [
        "data",
        "nice",
        "events"
    ]).nice;
    
    var Slice = Ice.Slice;

    nice.api = __M.module("nice.api");

    nice.api.queue = __M.module("nice.api.queue");

    /**
     * Command state
     * 
     **/
    nice.api.queue.CommandState = Slice.defineEnum([
        ['QUEUED', 0], ['RUNNING', 1], ['CHILDREN', 2], ['FINISHING', 3], ['FINISHED', 4],
        ['SKIPPED', 5]]);

    nice.api.queue.CommandError = Slice.defineObject(
        function(message, eventLevel, eventID)
        {
            Ice.Object.call(this);
            this.message = message !== undefined ? message : "";
            this.eventLevel = eventLevel !== undefined ? eventLevel : nice.api.events.EventLevel.INFO;
            this.eventID = eventID !== undefined ? eventID : 0;
        },
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::nice::api::queue::CommandError"
        ],
        -1,
        function(__os)
        {
            __os.writeString(this.message);
            nice.api.events.EventLevel.__write(__os, this.eventLevel);
            __os.writeLong(this.eventID);
        },
        function(__is)
        {
            this.message = __is.readString();
            this.eventLevel = nice.api.events.EventLevel.__read(__is);
            this.eventID = __is.readLong();
        },
        false);

    nice.api.queue.CommandErrorPrx = Slice.defineProxy(Ice.ObjectPrx, nice.api.queue.CommandError.ice_staticId, undefined);

    Slice.defineOperations(nice.api.queue.CommandError, nice.api.queue.CommandErrorPrx);
    Slice.defineSequence(nice.api.queue, "CommandErrorSeqHelper", "Ice.ObjectHelper", false, "nice.api.queue.CommandError");

    nice.api.queue.CommandStatus = Slice.defineStruct(
        function(state, commandStr, isBreakPoint, metaState, errors, validationErrors, startCommandTimestamp, endCommandTimestamp)
        {
            this.state = state !== undefined ? state : nice.api.queue.CommandState.QUEUED;
            this.commandStr = commandStr !== undefined ? commandStr : "";
            this.isBreakPoint = isBreakPoint !== undefined ? isBreakPoint : false;
            this.metaState = metaState !== undefined ? metaState : "";
            this.errors = errors !== undefined ? errors : null;
            this.validationErrors = validationErrors !== undefined ? validationErrors : null;
            this.startCommandTimestamp = startCommandTimestamp !== undefined ? startCommandTimestamp : 0;
            this.endCommandTimestamp = endCommandTimestamp !== undefined ? endCommandTimestamp : 0;
        },
        false,
        function(__os)
        {
            nice.api.queue.CommandState.__write(__os, this.state);
            __os.writeString(this.commandStr);
            __os.writeBool(this.isBreakPoint);
            __os.writeString(this.metaState);
            nice.api.queue.CommandErrorSeqHelper.write(__os, this.errors);
            nice.api.queue.CommandErrorSeqHelper.write(__os, this.validationErrors);
            __os.writeLong(this.startCommandTimestamp);
            __os.writeLong(this.endCommandTimestamp);
        },
        function(__is)
        {
            this.state = nice.api.queue.CommandState.__read(__is);
            this.commandStr = __is.readString();
            this.isBreakPoint = __is.readBool();
            this.metaState = __is.readString();
            this.errors = nice.api.queue.CommandErrorSeqHelper.read(__is);
            this.validationErrors = nice.api.queue.CommandErrorSeqHelper.read(__is);
            this.startCommandTimestamp = __is.readLong();
            this.endCommandTimestamp = __is.readLong();
        },
        22, 
        false);
    Slice.defineSequence(nice.api.queue, "QueueNodeArrayHelper", "Ice.ObjectHelper", false, "nice.api.queue.QueueNode");

    nice.api.queue.BaseQueueNode = Slice.defineObject(
        function(UUID, parentUUID, children)
        {
            Ice.Object.call(this);
            this.UUID = UUID !== undefined ? UUID : "";
            this.parentUUID = parentUUID !== undefined ? parentUUID : "";
            this.children = children !== undefined ? children : null;
        },
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::nice::api::queue::BaseQueueNode"
        ],
        -1,
        function(__os)
        {
            __os.writeString(this.UUID);
            __os.writeString(this.parentUUID);
            nice.api.queue.QueueNodeArrayHelper.write(__os, this.children);
        },
        function(__is)
        {
            this.UUID = __is.readString();
            this.parentUUID = __is.readString();
            this.children = nice.api.queue.QueueNodeArrayHelper.read(__is);
        },
        false);

    nice.api.queue.BaseQueueNodePrx = Slice.defineProxy(Ice.ObjectPrx, nice.api.queue.BaseQueueNode.ice_staticId, undefined);

    Slice.defineOperations(nice.api.queue.BaseQueueNode, nice.api.queue.BaseQueueNodePrx);

    nice.api.queue.QueueNode = Slice.defineObject(
        function(UUID, parentUUID, children, origin, status)
        {
            nice.api.queue.BaseQueueNode.call(this, UUID, parentUUID, children);
            this.origin = origin !== undefined ? origin : new nice.api.SessionId();
            this.status = status !== undefined ? status : new nice.api.queue.CommandStatus();
        },
        nice.api.queue.BaseQueueNode, undefined, 2,
        [
            "::Ice::Object",
            "::nice::api::queue::BaseQueueNode",
            "::nice::api::queue::QueueNode"
        ],
        -1,
        function(__os)
        {
            nice.api.SessionId.write(__os, this.origin);
            nice.api.queue.CommandStatus.write(__os, this.status);
        },
        function(__is)
        {
            this.origin = nice.api.SessionId.read(__is, this.origin);
            this.status = nice.api.queue.CommandStatus.read(__is, this.status);
        },
        false);

    nice.api.queue.QueueNodePrx = Slice.defineProxy(nice.api.queue.BaseQueueNodePrx, nice.api.queue.QueueNode.ice_staticId, undefined);

    Slice.defineOperations(nice.api.queue.QueueNode, nice.api.queue.QueueNodePrx);

    /**
     * Queue topic
     * 
     **/
    nice.api.queue.QueueEventType = Slice.defineEnum([
        ['ADDED', 0], ['REMOVED', 1], ['MOVED', 2], ['CHANGED', 3]]);

    nice.api.queue.QueueState = Slice.defineEnum([
        ['IDLE', 0], ['STOPPING', 1], ['BUSY', 2], ['SUSPENDED', 3], ['SUSPENDING', 4],
        ['SHUTDOWN', 5]]);

    nice.api.queue.QueueMonitor = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::nice::api::queue::QueueMonitor"
        ],
        -1, undefined, undefined, false);

    nice.api.queue.QueueMonitorPrx = Slice.defineProxy(Ice.ObjectPrx, nice.api.queue.QueueMonitor.ice_staticId, undefined);

    Slice.defineOperations(nice.api.queue.QueueMonitor, nice.api.queue.QueueMonitorPrx,
    {
        "nodesAdded": [, , , , , , [["nice.api.data.IntArrayHelper"], ["nice.api.queue.QueueNode", true]], , , true, ],
        "nodesRemoved": [, , , , , , [["nice.api.data.IntArrayHelper"], ["nice.api.queue.QueueNode", true]], , , true, ],
        "nodeStatusChanged": [, , , , , , [["nice.api.data.IntArrayHelper"], [7], [nice.api.queue.CommandStatus]], , , true, ],
        "stateChanged": [, , , , , , [[nice.api.queue.QueueState.__helper]], , , , ],
        "switchedCurrentExperiment": [, , , , , , [[nice.api.queue.QueueState.__helper], ["nice.api.queue.BaseQueueNode", true]], , , true, ],
        "onSubscribe": [, , , , , , [[nice.api.queue.QueueState.__helper], ["nice.api.queue.BaseQueueNode", true]], , , true, ],
        "setQueueDryrunTime": [, , , , , , [[4]], , , , ]
    });
    exports.nice = nice;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));
