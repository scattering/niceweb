// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `clientapi.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    var Ice = require("ice").Ice;
    var __M = Ice.__M;
    var Glacier2 = require("ice").Glacier2;
    var nice = __M.require(module, 
    [
        "exceptions",
        "system",
        "experiment",
        "dryrun",
        "queue",
        "console",
        "data",
        "devices",
        "file",
        "persist",
        "sampleAlignment",
        "scriptapi"
    ]).nice;
    
    var Slice = Ice.Slice;

    nice.api = __M.module("nice.api");

    nice.api.ServerState = Slice.defineEnum([
        ['FAILED', 0], ['STARTING', 1], ['STARTED', 2]]);

    nice.api.ServerStartupState = Slice.defineObject(
        function(state, failureMessage, htmlStackTrace)
        {
            Ice.Object.call(this);
            this.state = state !== undefined ? state : nice.api.ServerState.FAILED;
            this.failureMessage = failureMessage !== undefined ? failureMessage : "";
            this.htmlStackTrace = htmlStackTrace !== undefined ? htmlStackTrace : "";
        },
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::nice::api::ServerStartupState"
        ],
        -1,
        function(__os)
        {
            nice.api.ServerState.__write(__os, this.state);
            __os.writeString(this.failureMessage);
            __os.writeString(this.htmlStackTrace);
        },
        function(__is)
        {
            this.state = nice.api.ServerState.__read(__is);
            this.failureMessage = __is.readString();
            this.htmlStackTrace = __is.readString();
        },
        false);

    nice.api.ServerStartupStatePrx = Slice.defineProxy(Ice.ObjectPrx, nice.api.ServerStartupState.ice_staticId, undefined);

    Slice.defineOperations(nice.api.ServerStartupState, nice.api.ServerStartupStatePrx);

    /**
     * Simple interface for getting an interface for the actual Client API.  
     * This should provide no functionality other than providing a way to 
     * obtain a ClientApi (possibly with admin privileges if proper 
     * credentials are supplied).
     **/
    nice.api.ClientApiManager = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::nice::api::ClientApiManager"
        ],
        -1, undefined, undefined, false);

    nice.api.ClientApiManagerPrx = Slice.defineProxy(Ice.ObjectPrx, nice.api.ClientApiManager.ice_staticId, undefined);

    Slice.defineOperations(nice.api.ClientApiManager, nice.api.ClientApiManagerPrx,
    {
        "getMajorAPIVersion": [, , , , , [3], , , , , ],
        "getMinorAPIVersion": [, , , , , [3], , , , , ],
        "getStartupState": [, , , , , ["nice.api.ServerStartupState", true], , , , , true],
        "getAPI": [, , , , , ["nice.api.ClientApiPrx"], [[7]], , 
        [
            nice.api.exceptions.ServerNotReadyException
        ], , ],
        "getScriptAPI": [, , , , , ["nice.api.ScriptApiPrx"], [[7]], , 
        [
            nice.api.exceptions.ServerNotReadyException
        ], , ]
    });

    /**
     * NICE client api.
     * 
     * Calls to the NICE server can be performed using api.command(...).  These
     * includes commands for querying the instrument definition and current
     * state as well as commands for moving the instrument.
     * 
     * Common commands include readValue, readFullValue, move, console, complete,
     * getAllNodes and getAllDevices.  The compete set is listed in 
     * slices/clientapi.ice in the NICE source tree.
     * 
     * Many commands are called and return directly, but queued commands will
     * block.  You can avoid blocking using h = api.COMMAND_nowait(...), where
     * COMMAND is a blocking command like move and then later use api.wait_for(h) 
     * to wait for the command to complete.  If the command is non-blocking, it 
     * will return its value immediately.
     **/
    nice.api.ClientApi = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::nice::api::ClientApi"
        ],
        -1, undefined, undefined, false);

    nice.api.ClientApiPrx = Slice.defineProxy(Ice.ObjectPrx, nice.api.ClientApi.ice_staticId, undefined);

    Slice.defineOperations(nice.api.ClientApi, nice.api.ClientApiPrx,
    {
        "createExperiment": [, , , , , [7], [[1], [4], [7], [7], [7], [7], ["nice.api.data.StringArrayHelper"], [nice.api.experiment.PublishMode.__helper], [1]], , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "modifyCurrentExperiment": [, , , , , , [[7], [7], [7], ["nice.api.data.StringArrayHelper"], [nice.api.experiment.PublishMode.__helper]], , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "switchCurrentExperiment": [, , , , , , [[7], [1], [1]], , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "registerEvent": [, , , , , ["nice.api.data.IntValue", true], [[nice.api.events.EventLevel.__helper], [7]], , 
        [
            nice.api.exceptions.CommandException
        ], , true],
        "resolveEvent": [, , , , , ["nice.api.data.StringValue", true], [[3], [7]], , 
        [
            nice.api.exceptions.CommandException
        ], , true],
        "acknowledgeEvent": [, , , , , ["nice.api.data.StringValue", true], [[3]], , 
        [
            nice.api.exceptions.CommandException
        ], , true],
        "console": [, , , , , [8, true], [[7]], , 
        [
            nice.api.exceptions.CommandException
        ], , true],
        "validateConsoleCommands": [, , , , , ["nice.api.data.BoolArrayHelper"], [["nice.api.data.StringArrayHelper"], [1]], , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "complete": [, , , , , ["nice.api.data.CompletionResult", true], [[7]], , , , true],
        "setUserBreak": [, , , , , , [[7], [1]], , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "setSystemBreak": [, , , , , , [[7], [1]], , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "deleteQueueCommand": [, , , , , , [[7]], , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "insertQueueCommand": [, , , , , , [[7], ["nice.api.data.StringArrayHelper"], [1]], , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "moveQueueCommand": [, , , , , , [["nice.api.data.StringArrayHelper"], [7], [1], [1]], , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "suspend": [, , , , , , , , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "resume": [, , , , , , , , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "stop": [, , , , , , , , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "move": [, , , , , ["nice.api.queue.QueueNode", true], [["nice.api.data.StringArrayHelper"], [1]], , 
        [
            nice.api.exceptions.CommandException
        ], , true],
        "setUnit": [, , , , , ["nice.api.queue.QueueNode", true], [[7], [7]], , 
        [
            nice.api.exceptions.CommandException
        ], , true],
        "setPrecision": [, , , , , ["nice.api.queue.QueueNode", true], [[7], [6]], , 
        [
            nice.api.exceptions.CommandException
        ], , true],
        "setStored": [, , , , , ["nice.api.queue.QueueNode", true], [[7], [1]], , 
        [
            nice.api.exceptions.CommandException
        ], , true],
        "setUserLocked": [, , , , , ["nice.api.queue.QueueNode", true], [[7], [1]], , 
        [
            nice.api.exceptions.CommandException
        ], , true],
        "setAdminLocked": [, , , , , ["nice.api.queue.QueueNode", true], [[7], [1]], , 
        [
            nice.api.exceptions.CommandException
        ], , true],
        "getCanonicalNodeID": [, , , , , [7], [[7]], , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "getAllNodes": [, , , , , ["nice.api.devices.NodeArrayHelper"], , , 
        [
            nice.api.exceptions.CommandException
        ], , true],
        "getAllDevices": [, , , , , ["nice.api.devices.DeviceMapHelper"], , , 
        [
            nice.api.exceptions.CommandException
        ], , true],
        "getDeviceHierarchy": [, , , , , [7], , , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "getDefaultGuiProperty": [, , , , , [7], , , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "read": [, , , , , [7], [[7]], , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "readValue": [, , , , , ["nice.api.data.Value", true], [[7]], , 
        [
            nice.api.exceptions.CommandException
        ], , true],
        "readValueInternalUnits": [, , , , , ["nice.api.data.Value", true], [[7]], , 
        [
            nice.api.exceptions.CommandException
        ], , true],
        "getInstalledLogicalCounters": [, , , , , ["nice.api.data.StringArrayValue", true], , , 
        [
            nice.api.exceptions.CommandException
        ], , true],
        "readFullValue": [, , , , , ["nice.api.devices.NodeStatusValue", true], [[7]], , 
        [
            nice.api.exceptions.CommandException
        ], , true],
        "getHistoricValue": [, , , , , ["nice.api.devices.NodeStatusValueArrayHelper"], [["nice.api.data.StringArrayHelper"], [4], [1]], , 
        [
            nice.api.exceptions.CommandException
        ], , true],
        "add": [, , , , , ["nice.api.queue.QueueNode", true], [[1], ["nice.api.data.StringArrayHelper"]], , 
        [
            nice.api.exceptions.CommandException
        ], , true],
        "remove": [, , , , , ["nice.api.queue.QueueNode", true], [["nice.api.data.StringArrayHelper"]], , 
        [
            nice.api.exceptions.CommandException
        ], , true],
        "getDeviceConfigList": [, , , , , ["nice.api.data.StringArrayValue", true], , , 
        [
            nice.api.exceptions.CommandException
        ], , true],
        "getComChannelConfigList": [, , , , , ["nice.api.data.StringArrayValue", true], , , 
        [
            nice.api.exceptions.CommandException
        ], , true],
        "getDeviceConfig": [, , , , , ["nice.api.data.StringToStringMapValue", true], [[7]], , 
        [
            nice.api.exceptions.CommandException
        ], , true],
        "getDeviceComChannelConfig": [, , , , , ["nice.api.data.StringToStringMapValue", true], [[7]], , 
        [
            nice.api.exceptions.CommandException
        ], , true],
        "simMultiplyRate": [, , , , , , [[6]], , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "simTimeTravel": [, , , , , , [[6]], , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "publishContents": [, , , , , , [["nice.api.data.StringArrayHelper"]], , 
        [
            nice.api.exceptions.CommandException,
            nice.api.exceptions.TopicException
        ], , ],
        "writeFileFromText": [, , , , , , [[7], [7], [1], [1]], , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "writeFilesFromText": [, , , , , , [[7], ["nice.api.data.StringToStringMapHelper"], [1], [1]], , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "createNextFileIndex": [, , , , , [3], [[7], [7], [7], [7]], , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "getHighestFileIndex": [, , , , , [3], [[7], [7], [7]], , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "deleteFiles": [, , , , , , [["nice.api.data.StringArrayHelper"]], , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "createDirectory": [, , , , , , [[7]], , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "moveFiles": [, , , , , , [["nice.api.data.StringArrayHelper"], [7], [1], [1]], , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "refreshEntireFileSystem": [, , , , , , , , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "refreshFileSystem": [, , , , , , [[7]], , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "ls": [, , , , , ["nice.api.data.StringArrayHelper"], [[7], [7], [1]], , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "doesFileOrDirectoryExist": [, , , , , [1], [[7]], , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "readFileAsText": [, , , , , [7], [[7]], , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "readFilesAsText": [, , , , , ["nice.api.data.StringToStringMapHelper"], [[7], [7], [1]], , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "getHKLReflections": [, , , , , ["nice.api.sampleAlignment.HKLReflectionMapHelper"], , , 
        [
            nice.api.exceptions.CommandException
        ], , true],
        "setHKLReflections": [, , , , , , [["nice.api.sampleAlignment.HKLReflectionMapHelper"]], , 
        [
            nice.api.exceptions.CommandException
        ], true, ],
        "getNextHKLReflectionID": [, , , , , [3], , , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "fitLattice": [, , , , , ["nice.api.sampleAlignment.SampleGeometryFitResults", true], [[nice.api.sampleAlignment.CrystalSystem.__helper], ["nice.api.data.StringToDoubleMapHelper"]], , 
        [
            nice.api.exceptions.CommandException
        ], , true],
        "fitZeroes": [, , , , , ["nice.api.sampleAlignment.SampleGeometryFitResults", true], [[1], [1]], , 
        [
            nice.api.exceptions.CommandException
        ], , true],
        "calcU1": [, , , , , ["nice.api.sampleAlignment.UCalcResults", true], [[3], ["nice.api.data.DoubleArrayHelper"], ["nice.api.data.DoubleArrayHelper"]], , 
        [
            nice.api.exceptions.CommandException
        ], , true],
        "calcU2": [, , , , , ["nice.api.sampleAlignment.UCalcResults", true], [[3], [3]], , 
        [
            nice.api.exceptions.CommandException
        ], , true],
        "fitUMatrix": [, , , , , ["nice.api.sampleAlignment.UFitResults", true], [["nice.api.data.IntArrayHelper"], ["nice.api.data.StringArrayHelper"], [nice.api.sampleAlignment.CrystalSystem.__helper]], , 
        [
            nice.api.exceptions.CommandException
        ], , true],
        "calcTwoTheta": [, , , , , [6], [[6], [6], [6], [6], [6], [6], [6], [6], [6], [6]], , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "calcMotorsFromHKL": [, , , , , ["nice.api.sampleAlignment.HKLMotorPositions", true], [["nice.api.sampleAlignment.HKLMotorPositionsInput", true]], , 
        [
            nice.api.exceptions.CommandException
        ], true, true],
        "getHelpManual": [, , , , , [7], , , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "lock": [, , , , , , , , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "unlock": [, , , , , , , , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "shutdown": [, , , , , , , , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "getStaticSystemState": [, , , , , ["nice.api.system.StaticSystemState", true], , , 
        [
            nice.api.exceptions.CommandException
        ], , true],
        "runJsonTrajectory": [, , , , , , [[7]], , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "runPointCommand": [, , , , , , [["nice.api.data.StringToStringMapHelper"], [7], [3], [7]], , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "runJsonTrajectoryFile": [, , , , , , [[7]], , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "dryrunJsonTrajectoryFile": [, , , , , [3], [[7]], , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "runJsonTrajectoryFileWithPreInit": [, , , , , , [[7], ["nice.api.data.StringArrayHelper"]], , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "dryrunJsonTrajectoryFileWithPreInit": [, , , , , [3], [[7], ["nice.api.data.StringArrayHelper"]], , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "writer": [, , , , , [7], [[nice.api.data.StartStopAction.__helper], ["nice.api.data.StringArrayHelper"]], , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "getTrajectoryMetaData": [, , , , , ["nice.api.data.IntToTrajectoryMetaDataMapHelper"], [[7]], , 
        [
            nice.api.exceptions.InvalidParameterException
        ], , true],
        "startDataCollection": [, , , , , , , , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "writeData": [, , , , , , , , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "endDataCollection": [, , , , , , , , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "getPersistentValue": [, , , , , [7], [[7]], , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "putPersistentValue": [, , , , , , [[7], ["nice.api.data.Value", true]], , 
        [
            nice.api.exceptions.CommandException
        ], true, ],
        "logEvent": [, , , , , , [[nice.api.events.EventLevel.__helper], [7]], , 
        [
            nice.api.exceptions.TopicException
        ], , ],
        "refresh": [, , , , , , , , , , ],
        "getRefreshTimeout": [, , , , , [6], , , , , ],
        "startQueueDryrun": [, , , , , , , , , , ],
        "seCalc": [, , , , , [7], [[7]], , 
        [
            nice.api.exceptions.CommandException
        ], , ],
        "subscribeToSystem": [, , , , , , [["nice.api.system.SystemMonitorPrx"]], , 
        [
            nice.api.exceptions.TopicException
        ], , ],
        "subscribeToExperiment": [, , , , , , [["nice.api.experiment.ExperimentMonitorPrx"]], , 
        [
            nice.api.exceptions.TopicException
        ], , ],
        "subscribeToPeristentConfig": [, , , , , , [["nice.api.persist.PersistMonitorPrx"]], , 
        [
            nice.api.exceptions.TopicException
        ], , ],
        "subscribeToQueue": [, , , , , , [["nice.api.queue.QueueMonitorPrx"]], , 
        [
            nice.api.exceptions.TopicException
        ], , ],
        "subscribeToDryrun": [, , , , , , [["nice.api.dryrun.DryrunMonitorPrx"]], , 
        [
            nice.api.exceptions.TopicException
        ], , ],
        "subscribeToData": [, , , , , , [["nice.api.data.DataMonitorPrx"]], , 
        [
            nice.api.exceptions.TopicException
        ], , ],
        "subscribeToConsole": [, , , , , , [["nice.api.console.ConsoleMonitorPrx"]], , 
        [
            nice.api.exceptions.TopicException
        ], , ],
        "subscribeToEvents": [, , , , , , [["nice.api.events.EventsMonitorPrx"]], , 
        [
            nice.api.exceptions.TopicException
        ], , ],
        "subscribeToDevices": [, , , , , , [["nice.api.devices.DevicesMonitorPrx"]], , 
        [
            nice.api.exceptions.TopicException
        ], , ],
        "subscribeToFile": [, , , , , , [["nice.api.file.FileMonitorPrx"]], , 
        [
            nice.api.exceptions.TopicException
        ], , ]
    });

    nice.api.Glacier2ClientApiSessionManager = Slice.defineObject(
        undefined,
        Ice.Object,
        [
            Glacier2.SessionManager
        ], 2,
        [
            "::Glacier2::SessionManager",
            "::Ice::Object",
            "::nice::api::Glacier2ClientApiSessionManager"
        ],
        -1, undefined, undefined, false);

    nice.api.Glacier2ClientApiSessionManagerPrx = Slice.defineProxy(Ice.ObjectPrx, nice.api.Glacier2ClientApiSessionManager.ice_staticId, [
        Glacier2.SessionManagerPrx]);

    Slice.defineOperations(nice.api.Glacier2ClientApiSessionManager, nice.api.Glacier2ClientApiSessionManagerPrx);

    nice.api.Glacier2ClientApiSession = Slice.defineObject(
        undefined,
        Ice.Object,
        [
            Glacier2.Session, 
            nice.api.ClientApiManager
        ], 3,
        [
            "::Glacier2::Session",
            "::Ice::Object",
            "::nice::api::ClientApiManager",
            "::nice::api::Glacier2ClientApiSession"
        ],
        -1, undefined, undefined, false);

    nice.api.Glacier2ClientApiSessionPrx = Slice.defineProxy(Ice.ObjectPrx, nice.api.Glacier2ClientApiSession.ice_staticId, [
        Glacier2.SessionPrx, 
        nice.api.ClientApiManagerPrx]);

    Slice.defineOperations(nice.api.Glacier2ClientApiSession, nice.api.Glacier2ClientApiSessionPrx);
    exports.nice = nice;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));
